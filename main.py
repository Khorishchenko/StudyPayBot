import config
import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, LabeledPrice
from aiogram.utils import executor
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from cours_info import COURSE_PROGRAMMING_BASICS, COURSE_PYTHON_BASICS, courses

# –õ–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —ñ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=config.TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

course_selection = int(0)

channel_names = ['https://t.me/Kh_Sergii']
channel_invite_link = 'https://t.me/+gANNq7WHXUlhOTU6'  # –ó–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª


# –¶—ñ–Ω–∞ –∑–∞ –∫—É—Ä—Å
PRICE_1 = LabeledPrice(label="–ö—É—Ä—Å 1", amount=1000 * 100)  # 1000 –≥—Ä–Ω
PRICE_2 = LabeledPrice(label="–ö—É—Ä—Å 2", amount=1500 * 100)  # 1500 –≥—Ä–Ω




# –°—Ç–∞—Ä—Ç–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
@dp.message_handler(commands=['start'])
async def start(message: types.Message):

    keyboard = types.ReplyKeyboardMarkup(
        resize_keyboard=True,
        input_field_placeholder="–ó—Ä–æ–±—ñ—Ç—å —Å–≤—ñ–π –≤–∏–±—ñ—Ä..."
    )
    keyboard.row(types.KeyboardButton(text="üîÅ –ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ"))
    keyboard.row(
        types.KeyboardButton(text="üìñ –ö—É—Ä—Å 1"),
        types.KeyboardButton(text="üìö –ö—É—Ä—Å 2")
    )
    keyboard.row(types.KeyboardButton("üÜò –ü—ñ–¥—Ç—Ä–∏–º–∫–∞"))

 
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —ñ –∫–Ω–æ–ø–∫–∏                  
    await message.answer( f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name} ! –¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ –∑—Ä–æ–±–∏—Ç–∏ –æ–ø–ª–∞—Ç—É –∑–∞ –∫—É—Ä—Å.\n"
                         "<u>–û–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –∫—É—Ä—Å—ñ–≤:</u>\n\n"
                         "<b>–ö—É—Ä—Å 1: –û—Å–Ω–æ–≤–∏ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è üíª</b>\n"
                         "<b>–ö—É—Ä—Å 2: –û—Å–Ω–æ–≤–∏ Python üêç</b>", parse_mode='HTML', reply_markup=keyboard)





@dp.message_handler(lambda message: message.text == "üîÅ –ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ")
async def repit(message: types.Message):
     # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —ñ –∫–Ω–æ–ø–∫–∏
    await message.answer("–ü—Ä–∏–≤—ñ—Ç! –¶–µ–π –±–æ—Ç –¥–æ–ø–æ–º–æ–∂–µ —Ç–æ–±—ñ –∑—Ä–æ–±–∏—Ç–∏ –æ–ø–ª–∞—Ç—É –∑–∞ –∫—É—Ä—Å.\n"
                         "<u>–û–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω —ñ–∑ –∫—É—Ä—Å—ñ–≤:</u>\n\n"
                         "<b>–ö—É—Ä—Å 1: –û—Å–Ω–æ–≤–∏ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è üíª</b>\n"
                         "<b>–ö—É—Ä—Å 2: –û—Å–Ω–æ–≤–∏ Python üêç</b>", parse_mode='HTML')



# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ö—É—Ä—Å 1

@dp.message_handler(lambda message: message.text == "üìñ –ö—É—Ä—Å 1")
async def show_course_1_info(message: types.Message):
    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫—É—Ä—Å –∑ –æ—Å–Ω–æ–≤ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è
    course_info = COURSE_PROGRAMMING_BASICS
    topics_list = '\n'.join(course_info["topics"])

    global course_selection
    course_selection = 2

    # –í–∏–≤–æ–¥–∏–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫—É—Ä—Å
    # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
    await message.answer(f"<b>{course_info['name']}</b>\n\n"
                        f"{course_info['description']}\n\n"
                        f"<u>–ë–∞–∑–æ–≤—ñ —Ç–µ–º–∏ –∫—É—Ä—Å—É:</u>\n{topics_list}", parse_mode='HTML')
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —è–∫–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—î –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è
    await bot.send_photo(message.chat.id, photo=course_info['image_url'])
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç–∏ –∑–∞ –∫—É—Ä—Å
    await send_invoice_for_course_1(message)




# –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –ö—É—Ä—Å 2

@dp.message_handler(lambda message: message.text == "üìö –ö—É—Ä—Å 2")
async def show_course_2_info(message: types.Message):
    # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫—É—Ä—Å –∑ –æ—Å–Ω–æ–≤ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è
    course_info = COURSE_PYTHON_BASICS
    topics_list = '\n'.join(course_info["topics"])

    global course_selection
    course_selection = 2

    # –í–∏–≤–æ–¥–∏–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫—É—Ä—Å
    # –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É
    await message.answer(f"<b>{course_info['name']}</b>\n\n"
                        f"{course_info['description']}\n\n"
                        f"<u>–ë–∞–∑–æ–≤—ñ —Ç–µ–º–∏ –∫—É—Ä—Å—É:</u>\n{topics_list}", parse_mode='HTML')
    
    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, —è–∫–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏–∑—É—î –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è
    await bot.send_photo(message.chat.id, photo=course_info['image_url'])

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ–ø–ª–∞—Ç–∏ –∑–∞ –∫—É—Ä—Å
    await send_invoice_for_course_2(message)




# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —ñ–Ω–≤–æ–π—Å—É –∑–∞ –ö—É—Ä—Å 1
async def send_invoice_for_course_1(message: types.Message):

    inline_kb = InlineKeyboardMarkup()
    inline_btn = InlineKeyboardButton('–ü—Ä–∏–¥–±–∞—Ç–∏ - –û—Å–Ω–æ–≤–∏ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è üíª: 1000–≥—Ä–Ω', url="https://prt.mn/qxnf_m7X-H")
    inline_kb.add(inline_btn)

    await message.answer("<b>–î–ª—è —Ç–æ–≥–æ —â–æ–± –æ–ø–ª–∞—Ç–∏—Ç–∏ –∫—É—Ä—Å, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.\n"
                        "–ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –æ–ø–ª–∞—Ç–∏, –∑—Ä–æ–±–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç –∞–±–æ —Ñ–æ—Ç–æ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó —Ç–∞ –Ω–∞–¥—ñ—à–ª–∏ –π–æ–≥–æ —Å—é–¥–∏, —É –Ω–∞—à —á–∞—Ç-–±–æ—Ç.\n\n"
                        "<i>–î—è–∫—É—î–º–æ –∑–∞ —Ç–≤–æ—é –¥–æ–≤—ñ—Ä—É —Ç–∞ –±–∞–∂–∞—î–º–æ —É—Å–ø—ñ—Ö—É —É –Ω–∞–≤—á–∞–Ω–Ω—ñ!</i></b> "
                         , parse_mode='HTML', reply_markup=inline_kb)



# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è —ñ–Ω–≤–æ–π—Å—É –∑–∞ –ö—É—Ä—Å 2
async def send_invoice_for_course_2(message: types.Message):

    inline_kb = InlineKeyboardMarkup()
    inline_btn = InlineKeyboardButton('–ü—Ä–∏–¥–±–∞—Ç–∏ - –û—Å–Ω–æ–≤–∏ Python üêç: 1000–≥—Ä–Ω', url="https://prt.mn/qxnf_m7X-H")
    inline_kb.add(inline_btn)

    
    await message.answer("<b>–î–ª—è —Ç–æ–≥–æ —â–æ–± –æ–ø–ª–∞—Ç–∏—Ç–∏ –∫—É—Ä—Å, –±—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.\n"
                        "–ü—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ—ó –æ–ø–ª–∞—Ç–∏, –∑—Ä–æ–±–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç –∞–±–æ —Ñ–æ—Ç–æ –∫–≤–∏—Ç–∞–Ω—Ü—ñ—ó —Ç–∞ –Ω–∞–¥—ñ—à–ª–∏ –π–æ–≥–æ —Å—é–¥–∏, —É –Ω–∞—à —á–∞—Ç-–±–æ—Ç.\n\n"
                        "<i>–î—è–∫—É—î–º–æ –∑–∞ —Ç–≤–æ—é –¥–æ–≤—ñ—Ä—É —Ç–∞ –±–∞–∂–∞—î–º–æ —É—Å–ø—ñ—Ö—É —É –Ω–∞–≤—á–∞–Ω–Ω—ñ!</i></b> "
                         , parse_mode='HTML', reply_markup=inline_kb)






@dp.message_handler(content_types=['photo'])
async def get_photo(message: types.Message):
    user_id = message.from_user.id

    name_course = ""
    chat_id = ""
    invite_link = ""

    if course_selection in courses:
        name_course, chat_id = courses[course_selection]
        invite_link = channel_invite_link  # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –∫–∞–Ω–∞–ª

    try:
        # –í—ñ–¥–ø—Ä–∞–≤—Ç–µ –∑–∞–ø–∏—Ç –Ω–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ –∫–∞–Ω–∞–ª—É –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º
        invite_kb = InlineKeyboardMarkup()
        invite_btn = InlineKeyboardButton(name_course, url=invite_link)
        invite_kb.add(invite_btn)

        await message.answer(
            f"{message.from_user.first_name} –ü–µ—Ä–µ–π–¥—ñ—Ç—å –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º —Ç–∞ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –∑–∞–ø–∏—Ç –¥–ª—è –≤—Å—Ç—É–ø—É. \n"
            "<b>–ó–∞–ø—Ä–æ—à–µ–Ω–Ω—è –Ω–∞ –≤—Å—Ç—É–ø –¥–æ –≥—Ä—É–ø–∏ –¥—ñ–π—Å–Ω–µ –æ–¥–Ω—É –≥–æ–¥–∏–Ω—É !</b>",
            parse_mode='HTML', reply_markup=invite_kb
        )

        await message.answer(
            "<u>–Ø–∫ —Ç—ñ–ª—å–∫–∏ –≤–∞—Å –¥–æ–¥–∞–¥—É—Ç—å, –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è —á–µ—Ä–µ–∑ —Ü–µ–π –¢–µ–ª–µ–≥—Ä–∞–º - –ë–æ—Ç.</u>",
            parse_mode='HTML'
        )


        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –∫–∞–Ω–∞–ª—É
        asyncio.create_task(periodic_membership_check(user_id, chat_id))

        my_user_id = 5867537861

        # –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        username = message.from_user.username
        if username:
            profile_link = f"[@{username}](https://t.me/{username})"
        else:
            profile_link = "–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –±–µ–∑ —ñ–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"
        await bot.send_message(my_user_id,
                               f"{message.from_user.first_name} {message.from_user.last_name}.\n–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø—Ä–æ—Ñ—ñ–ª—å: {profile_link}\n"
                               f"ID: {message.from_user.id}\n[>{name_course}<]")

        # —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        photo = message.photo[-1]  # –û—Å—Ç–∞–Ω–Ω—î (–Ω–∞–π–≤–∏—â–∞ —è–∫—ñ—Å—Ç—å) –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑—ñ —Å–ø–∏—Å–∫—É

        await bot.send_photo(chat_id=my_user_id, photo=photo.file_id)


    except Exception as e:
        logging.exception("–ü–æ–º–∏–ª–∫–∞ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É", e)
        await bot.send_message(user_id, "–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ.")







@dp.message_handler(lambda message: message.text == "üÜò –ü—ñ–¥—Ç—Ä–∏–º–∫–∞")
async def help_handler(message: types.Message):
    inline_kb = types.InlineKeyboardMarkup()
    inline_btn = types.InlineKeyboardButton('–ó–≤\'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º', url='https://t.me/SKh_telegram')
    inline_kb.add(inline_btn)

    await message.answer(f"–ü—Ä–∏–≤—ñ—Ç, {message.from_user.first_name}, "
                        "–¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—ó, –ø–µ—Ä–µ–π–¥–∏ –∑–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è–º –¥–æ —á–∞—Ç—É:",
                         reply_markup=inline_kb)






# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
async def check_user_membership(user_id, chat_id):
    try:
        chat_member = await bot.get_chat_member(chat_id=chat_id, user_id=user_id)
        if chat_member.status == 'member':
            # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–∞–≤ —á–ª–µ–Ω–æ–º –∫–∞–Ω–∞–ª—É
            await bot.send_message(user_id, "–í–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–∏—î–¥–Ω–∞–ª–∏—Å—è –¥–æ –∫–∞–Ω–∞–ª—É!")
            return True  # –ü–æ–≤—ñ–¥–æ–º–ª—è—î–º–æ, —â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –±—É–≤ –¥–æ–¥–∞–Ω–∏–π
        else:
            return False  # –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —â–µ –Ω–µ –ø—Ä–∏—î–¥–Ω–∞–≤—Å—è
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤—ñ—Ä—Ü—ñ —á–ª–µ–Ω—Å—Ç–≤–∞: {e}")
        return False




# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä—ñ–æ–¥–∏—á–Ω–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:
async def periodic_membership_check(user_id, chat_id, timeout=600):
    # –ß–∞—Å –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
    check_interval = 30
    elapsed_time = 0

    while elapsed_time < timeout:
        if await check_user_membership(user_id, chat_id):
            break  # –í–∏—Ö–æ–¥–∏–º–æ –∑ —Ü–∏–∫–ª—É, —è–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –¥–æ–¥–∞–Ω–∏–π –¥–æ –∫–∞–Ω–∞–ª—É
        await asyncio.sleep(check_interval)  # –ß–µ–∫–∞—î–º–æ –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é
        elapsed_time += check_interval

    if elapsed_time >= timeout:
        await bot.send_message(user_id, "–ß–∞—Å –Ω–∞ –ø—Ä–∏—î–¥–Ω–∞–Ω–Ω—è –¥–æ –∫–∞–Ω–∞–ª—É –∑–∞–∫—ñ–Ω—á–∏–≤—Å—è.")




if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
